[{"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\index.js":"1","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\App.js":"2","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Tagline\\Tagline.js":"4","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Header\\Header.js":"5","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\Input.js":"6","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Divider\\Divider.js":"7","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\RegularInput\\RegularInput.js":"8","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\AdvancedInput\\AdvancedInput.js":"9","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Result\\Result.js":"10","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\AdvancedInput\\Input\\Input.js":"11"},{"size":517,"mtime":1623797824610,"results":"12","hashOfConfig":"13"},{"size":469,"mtime":1627338920568,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1623797824614,"results":"15","hashOfConfig":"13"},{"size":174,"mtime":1627338920572,"results":"16","hashOfConfig":"13"},{"size":331,"mtime":1627338920569,"results":"17","hashOfConfig":"13"},{"size":775,"mtime":1646256094170,"results":"18","hashOfConfig":"13"},{"size":142,"mtime":1627338920574,"results":"19","hashOfConfig":"13"},{"size":608,"mtime":1627338920583,"results":"20","hashOfConfig":"13"},{"size":5982,"mtime":1693369179289,"results":"21","hashOfConfig":"13"},{"size":3070,"mtime":1646255974463,"results":"22","hashOfConfig":"13"},{"size":750,"mtime":1646256094170,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ksp3wp",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\index.js",[],["52","53"],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\App.js",[],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Tagline\\Tagline.js",[],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Header\\Header.js",[],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\Input.js",["54"],"import { Container } from '@chakra-ui/react';\r\n\r\nimport { useState } from 'react';\r\nimport RegularInput from './RegularInput/RegularInput';\r\nimport AdvancedInput from './AdvancedInput/AdvancedInput';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n\tconst [ isAdvanced, setIsAdvanced ] = useState(false);\r\n\r\n\tconst advancedInputHandler = () => {\r\n\t\tsetIsAdvanced(!isAdvanced);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container className={classes.input} centerContent maxW=\"container.sm\">\r\n\t\t\t{/* {isAdvanced ? (\r\n\t\t\t\t<AdvancedInput onAdvancedInput={advancedInputHandler} />\r\n\t\t\t) : (\r\n\t\t\t\t<RegularInput onAdvancedInput={advancedInputHandler} />\r\n\t\t\t)} */}\r\n\t\t\t<AdvancedInput onAdvancedInput={advancedInputHandler} />\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Divider\\Divider.js",[],"C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\RegularInput\\RegularInput.js",["55","56","57"],"import { Input as InputBox, HStack, Container, Flex, Spacer, Stack, Center } from '@chakra-ui/react';\r\n\r\nimport classes from './RegularInput.module.css';\r\n\r\nconst RegularInput = (props) => (\r\n\t<Container className={classes['input-div']}>\r\n\t\t<Flex className={classes.label}>\r\n\t\t\t<p>Molecule</p>\r\n\t\t\t<Spacer />\r\n\t\t\t<Center className={classes.button} onClick={props.onAdvancedInput}>\r\n\t\t\t\t<i class=\"fas fa-caret-right fa-lg\" />\r\n\t\t\t\t<button>Advanced</button>\r\n\t\t\t</Center>\r\n\t\t</Flex>\r\n\t\t<input type=\"text\" className={classes.input} placeholder=\"Ibuprofen\" />\r\n\t</Container>\r\n);\r\n\r\nexport default RegularInput;\r\n","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\AdvancedInput\\AdvancedInput.js",["58"],"import Input from './Input/Input';\r\nimport Result from '../../../Result/Result';\r\n\r\nimport { Fragment, Component } from 'react';\r\nimport { Container } from '@chakra-ui/react';\r\n\r\n\r\nimport classes from './AdvancedInput.module.css';\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nclass AdvancedInput extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.mediaQuery = {\r\n            desktop: 1200,\r\n            phone: 900,\r\n        };\r\n\r\n        this.state = {\r\n            result: false,\r\n            scores: \"none\",\r\n            windowWidth: null,\r\n        }\r\n\r\n        this.params = {\r\n            molecular_weight: '',\r\n            hydrogen_bond_donor_count: '',\r\n            hydrogen_bond_acceptor_count: '',\r\n            topological_polar_surface_area: '',\r\n            heavy_atom_count: '',\r\n            complexity: '',\r\n            melting_point: '',\r\n            solubility: '',\r\n            logp: '',\r\n        }\r\n\r\n        this.result = {\r\n            prediction_diabetes: '',\r\n            prediction_hypertenstion: '',\r\n            prediction_pain: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => {\r\n            this.setState({windowWidth: document.body.clientWidth})\r\n        });\r\n    }\r\n\r\n    // Scores returned from API are decimals, format to rounded percentages and decreasing order\r\n    formatScores() {\r\n        var scores_copy = this.state.scores;\r\n\r\n        var sorted_scores = []\r\n\r\n        for (var key in scores_copy) {\r\n            sorted_scores.push([key, scores_copy[key]])\r\n        }\r\n\r\n        // sort scores in descending order\r\n        sorted_scores.sort(function compare(kv1, kv2) {\r\n            return kv2[1] - kv1[1]\r\n        })\r\n\r\n        // format scores into percentages\r\n        for (var key in sorted_scores) {\r\n            console.log(sorted_scores[key][1]);\r\n            sorted_scores[key][1] = (Number(sorted_scores[key][1]) * 100).toFixed(2).toString() + '%';\r\n        }\r\n\r\n        console.log(\"sorted:\");\r\n        console.log(sorted_scores);\r\n        \r\n        this.setState({scores: sorted_scores});\r\n    }\r\n\r\n    changeHandler = e => {\r\n        this.params[e.target.name] = e.target.value\r\n    }\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault()\r\n        console.log(this.state);\r\n        axios.post('https://drugml-backend.azurewebsites.net/api/drug/', this.params)\r\n            .then(response => {\r\n                console.log(response)\r\n                this.setState({scores: response.data.message, result: true})\r\n                this.formatScores();\r\n                console.log(this.state.scores);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { molecular_weight, hydrogen_bond_donor_count, hydrogen_bond_acceptor_count, topological_polar_surface_area, heavy_atom_count, complexity, melting_point, solubility, logp } = this.state\r\n        const inputs = [\r\n            {\r\n                label: 'Molecular Weight (g)',\r\n                name: 'molecular_weight',\r\n                value: molecular_weight,\r\n                placeholder: '428.5',\r\n                isFirst: true\r\n            },\r\n            {\r\n                label: 'Hydrogen Bond Donor Count',\r\n                name: 'hydrogen_bond_donor_count',\r\n                value: hydrogen_bond_donor_count,\r\n                placeholder: '1'\r\n            },\r\n            {\r\n                label: 'Hydrogen Bond Acceptor Count',\r\n                name: 'hydrogen_bond_acceptor_count',\r\n                value: hydrogen_bond_acceptor_count,\r\n                placeholder: '5'\r\n            },\r\n            {\r\n                label: 'Topological Polar Surface Area',\r\n                name: 'topological_polar_surface_area',\r\n                value: topological_polar_surface_area,\r\n                placeholder: '87'\r\n            },\r\n            {\r\n                label: 'Heavy Atom Count',\r\n                name: 'heavy_atom_count',\r\n                value: heavy_atom_count,\r\n                placeholder: '32'\r\n            },\r\n            {\r\n                label: 'Complexity',\r\n                name: 'complexity',\r\n                value: complexity,\r\n                placeholder: '682'\r\n            },\r\n            {\r\n                label: 'Melting Point (K)',\r\n                name: 'melting_point',\r\n                value: melting_point,\r\n                placeholder: '453.7'\r\n            },\r\n            {\r\n                label: 'Solubility (mg/L)',\r\n                name: 'solubility',\r\n                value: solubility,\r\n                placeholder: '8.84'\r\n            },\r\n            {\r\n                label: 'logP',\r\n                name: 'logp',\r\n                value: logp,\r\n                placeholder: '4.5'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div style={{\r\n                width: this.state.windowWidth > this.mediaQuery.phone\r\n                ? '50%'\r\n                : '100%',\r\n            }}>\r\n            <Container className={classes['input-div']}>\r\n                <Fragment>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {inputs.map((input) => (\r\n                        <Input\r\n                            label={input.label}\r\n                            name={input.name}\r\n                            value={input.value}\r\n                            placeholder={input.placeholder}\r\n                            isFirst={input.isFirst}\r\n                            onAdvancedInput={this.props.onAdvancedInput}\r\n                            onChange={this.changeHandler}\r\n                        />\r\n                    ))}\r\n                    <button className={classes['button']} type=\"submit\">Enter</button>\r\n                </form>\r\n                <Result scores={this.state.scores} />\r\n            </Fragment>\r\n            </Container>\r\n             </div> \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default AdvancedInput;\r\n","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\Result\\Result.js",["59","60","61"],"import {HStack, Container, Flex, Spacer, Stack, Center } from '@chakra-ui/react';\r\n\r\nimport React, { Component, createRef } from 'react';\r\n\r\nimport classes from './Result.module.css';\r\n\r\nimport result_icon from '../../resources/result_icon.png';\r\n\r\nclass Result extends Component {\r\n\r\n    // For state of API result display\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.scrollToRef = createRef();\r\n\r\n        this.state = {\r\n            result_status: false,\r\n            prediction_one_name: 'none',\r\n            prediction_one_value: 'none',\r\n            prediction_two_name: 'none',\r\n            prediction_two_value: 'none',\r\n            prediction_three_name: 'none',\r\n            prediction_three_value: 'none',\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ result_status: true });\r\n        this.setState({ prediction_one_name: Object.values(nextProps.scores)[0][0].split(\"_\")[1] });\r\n        this.setState({ prediction_one_value: Object.values(nextProps.scores)[0][1] });\r\n        this.setState({ prediction_two_name: Object.values(nextProps.scores)[1][0].split(\"_\")[1] });\r\n        this.setState({ prediction_two_value: Object.values(nextProps.scores)[1][1] });\r\n        this.setState({ prediction_three_name: Object.values(nextProps.scores)[2][0].split(\"_\")[1] });\r\n        this.setState({ prediction_three_value: Object.values(nextProps.scores)[2][1] });\r\n        if (this.scrollToRef.current != null) {\r\n            this.scrollToRef.current.scrollIntoView( {behavior: 'smooth' } );\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className={classes['result-div']}>\r\n                {!this.state.result_status ? (\r\n                    <div></div>\r\n                     ) : (\r\n                    <div className={classes.resultContainer}>\r\n                        <Flex className={classes.label}>\r\n                            <p>Predictions</p>\r\n                            <Spacer />\r\n                        </Flex>\r\n                        <div className={classes.result}>\r\n                            <img src={result_icon} className={classes.icon} alt=\"icon\"></img>\r\n                            {this.state.prediction_one_name}{\" \"}{this.state.prediction_one_value}\r\n                        </div>\r\n                        <div className={classes.result}>\r\n                            <img src={result_icon} className={classes.icon} alt=\"icon\"></img>\r\n                            {this.state.prediction_two_name}{\" \"}{this.state.prediction_two_value}\r\n                        </div>\r\n                        <div className={classes.result}>\r\n                            <img src={result_icon} className={classes.icon} alt=\"icon\"></img>\r\n                            {this.state.prediction_three_name}{\" \"}{this.state.prediction_three_value}\r\n                        </div>\r\n                        <div ref={this.scrollToRef}></div>\r\n                    </div>\r\n                )}\r\n           </Container>\r\n        );\r\n    }\r\n}\r\n     \r\n\r\nexport default Result;\r\n\r\n","C:\\Users\\pharm\\Documents\\drugML\\drugML-app-frontend\\src\\components\\UI\\Input\\AdvancedInput\\Input\\Input.js",["62","63","64"],"import { Fragment } from 'react';\r\n\r\nimport { Container, Flex, Spacer, Center } from '@chakra-ui/react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => (\r\n\t<Container className={classes['input-div']}>\r\n\t\t<Flex className={classes.label}>\r\n\t\t\t<h4>{props.label}</h4>\r\n\t\t\t{/* {props.isFirst && (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<Spacer />\r\n\t\t\t\t\t<Center className={classes.button} onClick={props.onAdvancedInput}>\r\n\t\t\t\t\t\t<i class=\"fas fa-caret-down fa-lg\" />\r\n\t\t\t\t\t\t<button>Advanced</button>\r\n\t\t\t\t\t</Center>\r\n\t\t\t\t</Fragment>\r\n\t\t\t)} */}\r\n\t\t</Flex>\r\n\t\t<input type=\"text\" className={classes.input} name={props.name} value={props.value} placeholder={props.placeholder} onChange={props.onChange} />\r\n\t</Container>\r\n);\r\n\r\nexport default Input;\r\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":20},{"ruleId":"69","severity":1,"message":"73","line":1,"column":19,"nodeType":"71","messageId":"72","endLine":1,"endColumn":27},{"ruleId":"69","severity":1,"message":"74","line":1,"column":29,"nodeType":"71","messageId":"72","endLine":1,"endColumn":35},{"ruleId":"69","severity":1,"message":"75","line":1,"column":62,"nodeType":"71","messageId":"72","endLine":1,"endColumn":67},{"ruleId":"76","severity":1,"message":"77","line":70,"column":18,"nodeType":"71","messageId":"78","endLine":70,"endColumn":21},{"ruleId":"69","severity":1,"message":"74","line":1,"column":9,"nodeType":"71","messageId":"72","endLine":1,"endColumn":15},{"ruleId":"69","severity":1,"message":"75","line":1,"column":42,"nodeType":"71","messageId":"72","endLine":1,"endColumn":47},{"ruleId":"69","severity":1,"message":"79","line":1,"column":49,"nodeType":"71","messageId":"72","endLine":1,"endColumn":55},{"ruleId":"69","severity":1,"message":"80","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":18},{"ruleId":"69","severity":1,"message":"81","line":3,"column":27,"nodeType":"71","messageId":"72","endLine":3,"endColumn":33},{"ruleId":"69","severity":1,"message":"79","line":3,"column":35,"nodeType":"71","messageId":"72","endLine":3,"endColumn":41},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'RegularInput' is defined but never used.","Identifier","unusedVar","'InputBox' is defined but never used.","'HStack' is defined but never used.","'Stack' is defined but never used.","no-redeclare","'key' is already defined.","redeclared","'Center' is defined but never used.","'Fragment' is defined but never used.","'Spacer' is defined but never used.","no-global-assign","no-unsafe-negation"]